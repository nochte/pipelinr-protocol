// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pipe.proto

package pipes

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GenericResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenericResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenericResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenericResponseMultiError, or nil if none found.
func (m *GenericResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenericResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for OK

	// no validation rules for XId

	if len(errors) > 0 {
		return GenericResponseMultiError(errors)
	}
	return nil
}

// GenericResponseMultiError is an error wrapping multiple validation errors
// returned by GenericResponse.ValidateAll() if the designated constraints
// aren't met.
type GenericResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenericResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenericResponseMultiError) AllErrors() []error { return m }

// GenericResponseValidationError is the validation error returned by
// GenericResponse.Validate if the designated constraints aren't met.
type GenericResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenericResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenericResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenericResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenericResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenericResponseValidationError) ErrorName() string { return "GenericResponseValidationError" }

// Error satisfies the builtin error interface
func (e GenericResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenericResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenericResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenericResponseValidationError{}

// Validate checks the field values on GenericResponses with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenericResponses) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenericResponses with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenericResponsesMultiError, or nil if none found.
func (m *GenericResponses) ValidateAll() error {
	return m.validate(true)
}

func (m *GenericResponses) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGenericResponses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenericResponsesValidationError{
						field:  fmt.Sprintf("GenericResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenericResponsesValidationError{
						field:  fmt.Sprintf("GenericResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenericResponsesValidationError{
					field:  fmt.Sprintf("GenericResponses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GenericResponsesMultiError(errors)
	}
	return nil
}

// GenericResponsesMultiError is an error wrapping multiple validation errors
// returned by GenericResponses.ValidateAll() if the designated constraints
// aren't met.
type GenericResponsesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenericResponsesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenericResponsesMultiError) AllErrors() []error { return m }

// GenericResponsesValidationError is the validation error returned by
// GenericResponses.Validate if the designated constraints aren't met.
type GenericResponsesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenericResponsesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenericResponsesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenericResponsesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenericResponsesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenericResponsesValidationError) ErrorName() string { return "GenericResponsesValidationError" }

// Error satisfies the builtin error interface
func (e GenericResponsesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenericResponses.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenericResponsesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenericResponsesValidationError{}

// Validate checks the field values on Null with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Null) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Null with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NullMultiError, or nil if none found.
func (m *Null) ValidateAll() error {
	return m.validate(true)
}

func (m *Null) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NullMultiError(errors)
	}
	return nil
}

// NullMultiError is an error wrapping multiple validation errors returned by
// Null.ValidateAll() if the designated constraints aren't met.
type NullMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NullMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NullMultiError) AllErrors() []error { return m }

// NullValidationError is the validation error returned by Null.Validate if the
// designated constraints aren't met.
type NullValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NullValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NullValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NullValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NullValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NullValidationError) ErrorName() string { return "NullValidationError" }

// Error satisfies the builtin error interface
func (e NullValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNull.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NullValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NullValidationError{}

// Validate checks the field values on ReceiveOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReceiveOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceiveOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReceiveOptionsMultiError,
// or nil if none found.
func (m *ReceiveOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceiveOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AutoAck

	// no validation rules for Block

	// no validation rules for Count

	// no validation rules for Timeout

	// no validation rules for Pipe

	// no validation rules for RedeliveryTimeout

	if len(errors) > 0 {
		return ReceiveOptionsMultiError(errors)
	}
	return nil
}

// ReceiveOptionsMultiError is an error wrapping multiple validation errors
// returned by ReceiveOptions.ValidateAll() if the designated constraints
// aren't met.
type ReceiveOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiveOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiveOptionsMultiError) AllErrors() []error { return m }

// ReceiveOptionsValidationError is the validation error returned by
// ReceiveOptions.Validate if the designated constraints aren't met.
type ReceiveOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiveOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiveOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiveOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiveOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiveOptionsValidationError) ErrorName() string { return "ReceiveOptionsValidationError" }

// Error satisfies the builtin error interface
func (e ReceiveOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiveOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiveOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiveOptionsValidationError{}

// Validate checks the field values on Xid with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Xid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Xid with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in XidMultiError, or nil if none found.
func (m *Xid) ValidateAll() error {
	return m.validate(true)
}

func (m *Xid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XId

	if len(errors) > 0 {
		return XidMultiError(errors)
	}
	return nil
}

// XidMultiError is an error wrapping multiple validation errors returned by
// Xid.ValidateAll() if the designated constraints aren't met.
type XidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m XidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m XidMultiError) AllErrors() []error { return m }

// XidValidationError is the validation error returned by Xid.Validate if the
// designated constraints aren't met.
type XidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XidValidationError) ErrorName() string { return "XidValidationError" }

// Error satisfies the builtin error interface
func (e XidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XidValidationError{}

// Validate checks the field values on CompleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CompleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteRequestMultiError, or nil if none found.
func (m *CompleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XId

	// no validation rules for Step

	if len(errors) > 0 {
		return CompleteRequestMultiError(errors)
	}
	return nil
}

// CompleteRequestMultiError is an error wrapping multiple validation errors
// returned by CompleteRequest.ValidateAll() if the designated constraints
// aren't met.
type CompleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteRequestMultiError) AllErrors() []error { return m }

// CompleteRequestValidationError is the validation error returned by
// CompleteRequest.Validate if the designated constraints aren't met.
type CompleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteRequestValidationError) ErrorName() string { return "CompleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e CompleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteRequestValidationError{}

// Validate checks the field values on RouteLogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RouteLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RouteLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RouteLogRequestMultiError, or nil if none found.
func (m *RouteLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RouteLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XId

	if all {
		switch v := interface{}(m.GetLog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteLogRequestValidationError{
					field:  "Log",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteLogRequestValidationError{
					field:  "Log",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteLogRequestValidationError{
				field:  "Log",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RouteLogRequestMultiError(errors)
	}
	return nil
}

// RouteLogRequestMultiError is an error wrapping multiple validation errors
// returned by RouteLogRequest.ValidateAll() if the designated constraints
// aren't met.
type RouteLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteLogRequestMultiError) AllErrors() []error { return m }

// RouteLogRequestValidationError is the validation error returned by
// RouteLogRequest.Validate if the designated constraints aren't met.
type RouteLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteLogRequestValidationError) ErrorName() string { return "RouteLogRequestValidationError" }

// Error satisfies the builtin error interface
func (e RouteLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRouteLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteLogRequestValidationError{}

// Validate checks the field values on AddStepsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddStepsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddStepsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddStepsRequestMultiError, or nil if none found.
func (m *AddStepsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddStepsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XId

	// no validation rules for After

	if len(errors) > 0 {
		return AddStepsRequestMultiError(errors)
	}
	return nil
}

// AddStepsRequestMultiError is an error wrapping multiple validation errors
// returned by AddStepsRequest.ValidateAll() if the designated constraints
// aren't met.
type AddStepsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddStepsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddStepsRequestMultiError) AllErrors() []error { return m }

// AddStepsRequestValidationError is the validation error returned by
// AddStepsRequest.Validate if the designated constraints aren't met.
type AddStepsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddStepsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddStepsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddStepsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddStepsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddStepsRequestValidationError) ErrorName() string { return "AddStepsRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddStepsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddStepsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddStepsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddStepsRequestValidationError{}

// Validate checks the field values on Decoration with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Decoration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Decoration with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DecorationMultiError, or
// nil if none found.
func (m *Decoration) ValidateAll() error {
	return m.validate(true)
}

func (m *Decoration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XId

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return DecorationMultiError(errors)
	}
	return nil
}

// DecorationMultiError is an error wrapping multiple validation errors
// returned by Decoration.ValidateAll() if the designated constraints aren't met.
type DecorationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecorationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecorationMultiError) AllErrors() []error { return m }

// DecorationValidationError is the validation error returned by
// Decoration.Validate if the designated constraints aren't met.
type DecorationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecorationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecorationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecorationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecorationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecorationValidationError) ErrorName() string { return "DecorationValidationError" }

// Error satisfies the builtin error interface
func (e DecorationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecoration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecorationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecorationValidationError{}

// Validate checks the field values on Decorations with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Decorations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Decorations with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DecorationsMultiError, or
// nil if none found.
func (m *Decorations) ValidateAll() error {
	return m.validate(true)
}

func (m *Decorations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XId

	for idx, item := range m.GetDecorations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DecorationsValidationError{
						field:  fmt.Sprintf("Decorations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DecorationsValidationError{
						field:  fmt.Sprintf("Decorations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DecorationsValidationError{
					field:  fmt.Sprintf("Decorations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DecorationsMultiError(errors)
	}
	return nil
}

// DecorationsMultiError is an error wrapping multiple validation errors
// returned by Decorations.ValidateAll() if the designated constraints aren't met.
type DecorationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecorationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecorationsMultiError) AllErrors() []error { return m }

// DecorationsValidationError is the validation error returned by
// Decorations.Validate if the designated constraints aren't met.
type DecorationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecorationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecorationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecorationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecorationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecorationsValidationError) ErrorName() string { return "DecorationsValidationError" }

// Error satisfies the builtin error interface
func (e DecorationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecorations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecorationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecorationsValidationError{}
