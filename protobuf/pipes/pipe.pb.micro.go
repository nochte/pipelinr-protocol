// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pipe.proto

package pipes

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	messages "github.com/nochte/pipelinr/protobuf/messages"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Pipe service

func NewPipeEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Pipe service

type PipeService interface {
	// Send will send up a message envelop, and will return an event id, error if invalid for any reason
	Send(ctx context.Context, in *messages.MessageEnvelop, opts ...client.CallOption) (*Xid, error)
	// Recv will request to receive with options. Defaults to {
	//     AutoAck = false,
	//     Block = true,
	//     Count = 1,
	//     Timeout = inf
	// }
	Recv(ctx context.Context, in *ReceiveOptions, opts ...client.CallOption) (*messages.Events, error)
	// Ack acknowledges that a message by id was received and can be discarded from the re-enqueue queue queue
	Ack(ctx context.Context, in *CompleteRequest, opts ...client.CallOption) (*GenericResponse, error)
	// Complete takes a Xid and step, marking the step as complete (to be enqueued into the next pipe, if needed)
	Complete(ctx context.Context, in *CompleteRequest, opts ...client.CallOption) (*GenericResponse, error)
	// AppendLog takes a routelog and adds it to the message. If step is not given, assumes current step
	AppendLog(ctx context.Context, in *RouteLogRequest, opts ...client.CallOption) (*GenericResponse, error)
	// AddSteps adds steps to the route. If After is not given, assumes after current step
	AddSteps(ctx context.Context, in *AddStepsRequest, opts ...client.CallOption) (*GenericResponse, error)
	// Decorate takes a set of decorations and applies them to the message
	Decorate(ctx context.Context, in *Decorations, opts ...client.CallOption) (*GenericResponses, error)
}

type pipeService struct {
	c    client.Client
	name string
}

func NewPipeService(name string, c client.Client) PipeService {
	return &pipeService{
		c:    c,
		name: name,
	}
}

func (c *pipeService) Send(ctx context.Context, in *messages.MessageEnvelop, opts ...client.CallOption) (*Xid, error) {
	req := c.c.NewRequest(c.name, "Pipe.Send", in)
	out := new(Xid)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipeService) Recv(ctx context.Context, in *ReceiveOptions, opts ...client.CallOption) (*messages.Events, error) {
	req := c.c.NewRequest(c.name, "Pipe.Recv", in)
	out := new(messages.Events)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipeService) Ack(ctx context.Context, in *CompleteRequest, opts ...client.CallOption) (*GenericResponse, error) {
	req := c.c.NewRequest(c.name, "Pipe.Ack", in)
	out := new(GenericResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipeService) Complete(ctx context.Context, in *CompleteRequest, opts ...client.CallOption) (*GenericResponse, error) {
	req := c.c.NewRequest(c.name, "Pipe.Complete", in)
	out := new(GenericResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipeService) AppendLog(ctx context.Context, in *RouteLogRequest, opts ...client.CallOption) (*GenericResponse, error) {
	req := c.c.NewRequest(c.name, "Pipe.AppendLog", in)
	out := new(GenericResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipeService) AddSteps(ctx context.Context, in *AddStepsRequest, opts ...client.CallOption) (*GenericResponse, error) {
	req := c.c.NewRequest(c.name, "Pipe.AddSteps", in)
	out := new(GenericResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipeService) Decorate(ctx context.Context, in *Decorations, opts ...client.CallOption) (*GenericResponses, error) {
	req := c.c.NewRequest(c.name, "Pipe.Decorate", in)
	out := new(GenericResponses)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pipe service

type PipeHandler interface {
	// Send will send up a message envelop, and will return an event id, error if invalid for any reason
	Send(context.Context, *messages.MessageEnvelop, *Xid) error
	// Recv will request to receive with options. Defaults to {
	//     AutoAck = false,
	//     Block = true,
	//     Count = 1,
	//     Timeout = inf
	// }
	Recv(context.Context, *ReceiveOptions, *messages.Events) error
	// Ack acknowledges that a message by id was received and can be discarded from the re-enqueue queue queue
	Ack(context.Context, *CompleteRequest, *GenericResponse) error
	// Complete takes a Xid and step, marking the step as complete (to be enqueued into the next pipe, if needed)
	Complete(context.Context, *CompleteRequest, *GenericResponse) error
	// AppendLog takes a routelog and adds it to the message. If step is not given, assumes current step
	AppendLog(context.Context, *RouteLogRequest, *GenericResponse) error
	// AddSteps adds steps to the route. If After is not given, assumes after current step
	AddSteps(context.Context, *AddStepsRequest, *GenericResponse) error
	// Decorate takes a set of decorations and applies them to the message
	Decorate(context.Context, *Decorations, *GenericResponses) error
}

func RegisterPipeHandler(s server.Server, hdlr PipeHandler, opts ...server.HandlerOption) error {
	type pipe interface {
		Send(ctx context.Context, in *messages.MessageEnvelop, out *Xid) error
		Recv(ctx context.Context, in *ReceiveOptions, out *messages.Events) error
		Ack(ctx context.Context, in *CompleteRequest, out *GenericResponse) error
		Complete(ctx context.Context, in *CompleteRequest, out *GenericResponse) error
		AppendLog(ctx context.Context, in *RouteLogRequest, out *GenericResponse) error
		AddSteps(ctx context.Context, in *AddStepsRequest, out *GenericResponse) error
		Decorate(ctx context.Context, in *Decorations, out *GenericResponses) error
	}
	type Pipe struct {
		pipe
	}
	h := &pipeHandler{hdlr}
	return s.Handle(s.NewHandler(&Pipe{h}, opts...))
}

type pipeHandler struct {
	PipeHandler
}

func (h *pipeHandler) Send(ctx context.Context, in *messages.MessageEnvelop, out *Xid) error {
	return h.PipeHandler.Send(ctx, in, out)
}

func (h *pipeHandler) Recv(ctx context.Context, in *ReceiveOptions, out *messages.Events) error {
	return h.PipeHandler.Recv(ctx, in, out)
}

func (h *pipeHandler) Ack(ctx context.Context, in *CompleteRequest, out *GenericResponse) error {
	return h.PipeHandler.Ack(ctx, in, out)
}

func (h *pipeHandler) Complete(ctx context.Context, in *CompleteRequest, out *GenericResponse) error {
	return h.PipeHandler.Complete(ctx, in, out)
}

func (h *pipeHandler) AppendLog(ctx context.Context, in *RouteLogRequest, out *GenericResponse) error {
	return h.PipeHandler.AppendLog(ctx, in, out)
}

func (h *pipeHandler) AddSteps(ctx context.Context, in *AddStepsRequest, out *GenericResponse) error {
	return h.PipeHandler.AddSteps(ctx, in, out)
}

func (h *pipeHandler) Decorate(ctx context.Context, in *Decorations, out *GenericResponses) error {
	return h.PipeHandler.Decorate(ctx, in, out)
}

// Api Endpoints for Store service

func NewStoreEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Store service

type StoreService interface {
	Get(ctx context.Context, in *Xid, opts ...client.CallOption) (*messages.Event, error)
	Del(ctx context.Context, in *Xid, opts ...client.CallOption) (*GenericResponse, error)
}

type storeService struct {
	c    client.Client
	name string
}

func NewStoreService(name string, c client.Client) StoreService {
	return &storeService{
		c:    c,
		name: name,
	}
}

func (c *storeService) Get(ctx context.Context, in *Xid, opts ...client.CallOption) (*messages.Event, error) {
	req := c.c.NewRequest(c.name, "Store.Get", in)
	out := new(messages.Event)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeService) Del(ctx context.Context, in *Xid, opts ...client.CallOption) (*GenericResponse, error) {
	req := c.c.NewRequest(c.name, "Store.Del", in)
	out := new(GenericResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Store service

type StoreHandler interface {
	Get(context.Context, *Xid, *messages.Event) error
	Del(context.Context, *Xid, *GenericResponse) error
}

func RegisterStoreHandler(s server.Server, hdlr StoreHandler, opts ...server.HandlerOption) error {
	type store interface {
		Get(ctx context.Context, in *Xid, out *messages.Event) error
		Del(ctx context.Context, in *Xid, out *GenericResponse) error
	}
	type Store struct {
		store
	}
	h := &storeHandler{hdlr}
	return s.Handle(s.NewHandler(&Store{h}, opts...))
}

type storeHandler struct {
	StoreHandler
}

func (h *storeHandler) Get(ctx context.Context, in *Xid, out *messages.Event) error {
	return h.StoreHandler.Get(ctx, in, out)
}

func (h *storeHandler) Del(ctx context.Context, in *Xid, out *GenericResponse) error {
	return h.StoreHandler.Del(ctx, in, out)
}
