// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: accountingservice.proto

package accounting

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Accounting service

func NewAccountingEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Accounting service

type AccountingService interface {
	GetReport(ctx context.Context, in *GetReportRequest, opts ...client.CallOption) (*GetReportResponse, error)
}

type accountingService struct {
	c    client.Client
	name string
}

func NewAccountingService(name string, c client.Client) AccountingService {
	return &accountingService{
		c:    c,
		name: name,
	}
}

func (c *accountingService) GetReport(ctx context.Context, in *GetReportRequest, opts ...client.CallOption) (*GetReportResponse, error) {
	req := c.c.NewRequest(c.name, "Accounting.GetReport", in)
	out := new(GetReportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Accounting service

type AccountingHandler interface {
	GetReport(context.Context, *GetReportRequest, *GetReportResponse) error
}

func RegisterAccountingHandler(s server.Server, hdlr AccountingHandler, opts ...server.HandlerOption) error {
	type accounting interface {
		GetReport(ctx context.Context, in *GetReportRequest, out *GetReportResponse) error
	}
	type Accounting struct {
		accounting
	}
	h := &accountingHandler{hdlr}
	return s.Handle(s.NewHandler(&Accounting{h}, opts...))
}

type accountingHandler struct {
	AccountingHandler
}

func (h *accountingHandler) GetReport(ctx context.Context, in *GetReportRequest, out *GetReportResponse) error {
	return h.AccountingHandler.GetReport(ctx, in, out)
}
