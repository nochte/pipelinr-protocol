// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: messageenvelop.proto

package messages

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RouteLog with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RouteLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RouteLog with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RouteLogMultiError, or nil
// if none found.
func (m *RouteLog) ValidateAll() error {
	return m.validate(true)
}

func (m *RouteLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Step

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Time

	if len(errors) > 0 {
		return RouteLogMultiError(errors)
	}
	return nil
}

// RouteLogMultiError is an error wrapping multiple validation errors returned
// by RouteLog.ValidateAll() if the designated constraints aren't met.
type RouteLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteLogMultiError) AllErrors() []error { return m }

// RouteLogValidationError is the validation error returned by
// RouteLog.Validate if the designated constraints aren't met.
type RouteLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteLogValidationError) ErrorName() string { return "RouteLogValidationError" }

// Error satisfies the builtin error interface
func (e RouteLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRouteLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteLogValidationError{}

// Validate checks the field values on Decoration with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Decoration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Decoration with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DecorationMultiError, or
// nil if none found.
func (m *Decoration) ValidateAll() error {
	return m.validate(true)
}

func (m *Decoration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return DecorationMultiError(errors)
	}
	return nil
}

// DecorationMultiError is an error wrapping multiple validation errors
// returned by Decoration.ValidateAll() if the designated constraints aren't met.
type DecorationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecorationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecorationMultiError) AllErrors() []error { return m }

// DecorationValidationError is the validation error returned by
// Decoration.Validate if the designated constraints aren't met.
type DecorationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecorationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecorationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecorationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecorationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecorationValidationError) ErrorName() string { return "DecorationValidationError" }

// Error satisfies the builtin error interface
func (e DecorationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecoration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecorationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecorationValidationError{}

// Validate checks the field values on MessageEnvelop with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageEnvelop) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageEnvelop with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageEnvelopMultiError,
// or nil if none found.
func (m *MessageEnvelop) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageEnvelop) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Payload

	// no validation rules for MessageType

	for idx, item := range m.GetRouteLog() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageEnvelopValidationError{
						field:  fmt.Sprintf("RouteLog[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageEnvelopValidationError{
						field:  fmt.Sprintf("RouteLog[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageEnvelopValidationError{
					field:  fmt.Sprintf("RouteLog[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DecoratedPayload

	for idx, item := range m.GetDecorations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageEnvelopValidationError{
						field:  fmt.Sprintf("Decorations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageEnvelopValidationError{
						field:  fmt.Sprintf("Decorations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageEnvelopValidationError{
					field:  fmt.Sprintf("Decorations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MessageEnvelopMultiError(errors)
	}
	return nil
}

// MessageEnvelopMultiError is an error wrapping multiple validation errors
// returned by MessageEnvelop.ValidateAll() if the designated constraints
// aren't met.
type MessageEnvelopMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageEnvelopMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageEnvelopMultiError) AllErrors() []error { return m }

// MessageEnvelopValidationError is the validation error returned by
// MessageEnvelop.Validate if the designated constraints aren't met.
type MessageEnvelopValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageEnvelopValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageEnvelopValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageEnvelopValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageEnvelopValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageEnvelopValidationError) ErrorName() string { return "MessageEnvelopValidationError" }

// Error satisfies the builtin error interface
func (e MessageEnvelopValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageEnvelop.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageEnvelopValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageEnvelopValidationError{}
